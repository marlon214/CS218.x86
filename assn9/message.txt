Assn9
assn8 function used:
	shellSort	→ least to greatest
	lstSum
	lstAverage
	basicStats	→ 
	linearRegression

There should be no changes off we followed standard calling convention

In main
we will read in an a septenary number
we will return an adress to write that number
we will also give a return code 1-5

readSeptNum
!MUST USE STACK DYNAMIC LOCALS
read in base 7 number from stdin
use read character system service convert character input to integer
perform error checking
	we prompt user of invalid input when they press return 
	must have valid characters
	within range
	input length
return appropriate status code
if passes, return integer value → assn6 sept to int AND CONVERT TO FUNCTION


! READ ENTIRE INPUT, THEN CHECK!
(we are reading one character at a time)
	instead of looking for a specific amount of characters
		we will be looking for line feed to determine the end of of our sept number
		we cant eneter null from the keyboard so we look for line feed(enter)

	loop to convert/check input
	verify range(MIN/MAX)
	if good ,return value via reference and status= success
	if bad return appropriate status


Function readSeptNum
	looop to read user input
		getChar:
			read char
			if char =LF exit loop
			if(i<BUFFSIZE-1)
				str[i]=chr
				i++
			jmp getChar
			(if input > BUFFSIZE => set status exit function)
		enter NULL to end of string (in place of LF)

		loop to covert end of string
			check if “0”-”6”
				if yes, subtract “0” or 0x30
				if not return exit status

		(need to use some local variables)
1) dd seven (4) [optional]
2) char (1)
3) input buffer(50) [BUFFSIZE]

global readSeptNum
	push rbp
	mov rbp,rsp
	sub rsp, 55	; this will hold our char, string array, and our constant 7
	push rbx
	push r12
	push r13
	mov dword[rbp+54], 7
	mov r12, rdi

;loop to read user input

	lea rbx, byte[rbp-50]		our string array address will be stored in rbx
	mov r13, 0		;i=0	; index
getChar:
	;reads character
	mov rax, SYS_READ	; intialize rax, which is our return statement
	mov rdi, STDIN		; reads in the line
	lea rsi, byte[rbp-55]		; rsi 
	mov rdx,1
	syscall
;if char=LF => exit looop
	mov al,byte[rbp-55]
	cmp al, LF
	je inputDone
	
	cmp r12, BUFFSIZE-1
	ja buffFull
	mov byte[rbx+r13], al
	inc r13				;i++
buffFull:
	jmp getChar
inputDone:
;if input => BUFFSIZE => set status exit function
	cmp r13, BUFFSIZE
	jbe checkInput
	mov rax, INPUTOVERFLOW
	jmp readFuncDone
checkInput:
	mov byte[rbx+r13], NULL




; rax holds our return status



Dollys video
+10
+20
+30
+40
+50
+20000
-20
+50000
--------------------------------------------------
Program Results
Sorted X List: 
-14  7  21  35  
   X Minimum =           -14
    X Median =            14
   X Maximum =            35
       X Sum =            49
   X Average =            12
Sorted Y List: 
14  28  4802  12005  
   Y Minimum =            14
    Y Median =          2415
   Y Maximum =         12005
       Y Sum =         16849
   Y Average =          4212
Linear Regression Values 
 b0 =  1344
 b1 =  239
